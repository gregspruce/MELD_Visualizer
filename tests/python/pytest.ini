[tool:pytest]
# PyTest configuration for MELD Visualizer Python unit tests

# Test discovery
testpaths = unit
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# Markers for categorizing tests
markers =
    unit: Unit tests for individual components
    integration: Integration tests for component interactions
    performance: Performance and benchmark tests
    slow: Tests that take longer to run
    security: Security-related tests
    mock: Tests that heavily use mocking
    parametrize: Parametrized tests with multiple inputs
    skip_ci: Tests to skip in CI environment
    requires_data: Tests that require external data files

# Test execution options
addopts = 
    -v
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --color=yes
    --durations=10
    --cov=meld_visualizer
    --cov-report=html:../reports/coverage_html
    --cov-report=xml:../reports/coverage.xml
    --cov-report=json:../reports/coverage.json
    --cov-report=term-missing
    --cov-fail-under=80
    --junitxml=../reports/junit.xml

# Minimum version requirements
minversion = 6.0

# Warnings configuration
filterwarnings =
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore::UserWarning:plotly.*
    ignore::UserWarning:pandas.*
    error::UserWarning:meld_visualizer.*

# Logging configuration during tests
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(name)s: %(message)s
log_cli_date_format = %Y-%m-%d %H:%M:%S

log_file = ../reports/pytest.log
log_file_level = DEBUG
log_file_format = %(asctime)s [%(levelname)8s] %(filename)s:%(lineno)d %(funcName)s(): %(message)s
log_file_date_format = %Y-%m-%d %H:%M:%S

# Collection configuration
collect_ignore = [
    "setup.py",
    "conftest.py"
]

# Cache configuration
cache_dir = ../reports/.pytest_cache