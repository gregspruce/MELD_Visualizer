[build-system]
requires = ["hatchling>=1.21.0"]
build-backend = "hatchling.build"

[project]
name = "meld-visualizer"
version = "1.0.0"
description = "A Dash web application for visualizing 3D process data from MELD manufacturing"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "MELD Manufacturing Team"},
]
maintainers = [
    {name = "MELD Manufacturing Team"},
]
keywords = [
    "dash",
    "plotly", 
    "3d-visualization",
    "manufacturing",
    "meld",
    "data-visualization",
    "gcode",
    "mesh-generation"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Web Environment",
    "Framework :: Dash",
    "Intended Audience :: Manufacturing",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Visualization",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "dash>=2.14.0",
    "dash-bootstrap-components>=1.4.0",
    "plotly>=5.15.0",
    "pandas>=2.0.0",
    "numpy>=1.24.0",
    "scipy>=1.10.0",
]

[project.optional-dependencies]
dev = [
    "black>=23.0.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]
test = [
    # Core testing frameworks
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "pytest-mock>=3.11.0",
    "pytest-xvfb>=3.0.0",
    "pytest-html>=3.2.0",
    "pytest-json-report>=1.5.0",
    "pytest-timeout>=2.1.0",
    "pytest-rerunfailures>=11.1.0",
    
    # Performance and profiling
    "memory-profiler>=0.61.0",
    "psutil>=5.9.0",
    "py-spy>=0.3.14",
    
    # HTTP testing and mocking
    "responses>=0.23.0",
    "httpx>=0.24.0",
    "aiohttp>=3.8.0",
    
    # Data testing utilities
    "faker>=19.0.0",
    "factory-boy>=3.3.0",
    "hypothesis>=6.82.0",
    
    # Test utilities
    "freezegun>=1.2.2",
    "dirty-equals>=0.6.0",
    "testfixtures>=7.2.0",
    
    # Security testing
    "bandit>=1.7.5",
    "safety>=2.3.0",
]
playwright = [
    # Playwright testing dependencies
    "playwright>=1.37.0",
    "pytest-playwright>=0.4.2",
]
build = [
    "pyinstaller>=5.10.0",
    "auto-py-to-exe>=2.0.0",
]

[project.urls]
Homepage = "https://github.com/gregspruce/MELD_Visualizer"
Documentation = "https://github.com/gregspruce/MELD_Visualizer/docs"
Repository = "https://github.com/gregspruce/MELD_Visualizer.git"
Issues = "https://github.com/gregspruce/MELD_Visualizer/issues"

[project.scripts]
meld-visualizer = "meld_visualizer.app:main"

[tool.hatch.build.targets.wheel]
packages = ["src/meld_visualizer"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/docs",
    "/config",
    "/data",
    "/scripts",
    "README.md",
    "requirements.txt",
    "requirements-dev.txt",
]


[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | reports
)/
'''

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "dash.*",
    "plotly.*",
    "pandas.*",
    "numpy.*",
    "scipy.*",
]
ignore_missing_imports = true

[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "old",
    "build",
    "dist",
    "reports",
    ".venv",
    ".tox",
    ".eggs",
    "*.egg",
    "tests/reports",
]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests/python"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
addopts = [
    "-ra",
    "-q",
    "--tb=short",
    "--strict-markers",
    "--strict-config",
    "--cov=src/meld_visualizer",
    "--cov-report=term-missing",
    "--cov-report=html:tests/reports/coverage_html",
    "--cov-report=xml:tests/reports/coverage.xml",
    "--cov-report=json:tests/reports/coverage.json",
    "--cov-fail-under=75",
    "--junitxml=tests/reports/junit.xml",
    "--maxfail=3",
]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interactions", 
    "performance: Performance and benchmark tests",
    "slow: Tests that take longer to run",
    "security: Security-related tests",
    "mock: Tests that heavily use mocking",
    "parametrize: Parametrized tests with multiple inputs",
    "skip_ci: Tests to skip in CI environment",
    "requires_data: Tests that require external data files",
    "e2e: End-to-end tests",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning", 
    "ignore::UserWarning:plotly.*",
    "ignore::UserWarning:pandas.*",
    "error::UserWarning:meld_visualizer.*",
]
minversion = "7.0"
timeout = 300
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

# Coverage configuration
[tool.coverage.run]
source = ["src/meld_visualizer"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__main__.py",
    "*/setup.py",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.paths]
source = [
    "src/meld_visualizer",
    "*/site-packages/meld_visualizer",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
ignore_errors = true
show_missing = true
precision = 2

[tool.coverage.html]
directory = "tests/reports/coverage_html"

[tool.coverage.xml]
output = "tests/reports/coverage.xml"

[tool.coverage.json]
output = "tests/reports/coverage.json"

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "docs", "build", "dist"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_process for tests

# Safety configuration (for dependency vulnerability scanning)
[tool.safety]
ignore = []  # Add vulnerability IDs to ignore if needed

# Performance testing configuration
[tool.performance]
benchmark_timeout = 30
memory_limit_mb = 500
load_test_duration = 300

# Test data configuration
[tool.test_data]
csv_samples_dir = "tests/playwright/fixtures/test_data"
gcode_samples_dir = "tests/playwright/fixtures/test_data"
large_dataset_size = 50000
performance_dataset_size = 10000