name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow Claude to run project-specific commands
          allowed_tools: |
            Bash(python app.py)
            Bash(pytest*)
            Bash(bash run_tests.sh*)
            Bash(pip install*)
            Bash(python -m pip install*)
            Bash(pyinstaller*)
            Bash(python -c*)
            Bash(black*)
            Bash(isort*)
            Bash(ruff*)
          
          # Custom instructions for the MELD Visualizer project
          custom_instructions: |
            This is a Dash web application for visualizing 3D MELD manufacturing data.
            
            Key project requirements:
            - Follow the modular MVC architecture (app.py → layout.py → callbacks.py → data_processing.py)
            - Use existing patterns for Dash callbacks with pattern matching IDs
            - Maintain compatibility with the current theme system (20+ Bootstrap themes)
            - Run tests with pytest before suggesting changes: `pytest -m "not e2e"` for unit tests
            - Check that new code works with the existing CSV data processing pipeline
            - Preserve the G-code visualization and volume mesh generation functionality
            - Maintain Python 3.10+ compatibility
            
            Before making changes:
            1. Run the test suite to ensure existing functionality
            2. Check config.json structure if modifying configuration
            3. Test with sample data files in the CSV/ directory
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test

